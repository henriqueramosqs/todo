/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS (and SCSS, if configured) file within this directory, lib/assets/stylesheets, or any plugin's
 * vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any other CSS
 * files in this directory. Styles in this file should be added after the last require_* statement.
 * It is generally better to create a new file per style scope.
 *
 *= require_tree .
 *= require_self
 */

.container {
max-width: 1000px;
margin: 0 auto;
padding: 2rem;
}

.page-title {
text-align: center;
color: #2c3e50;
margin-bottom: 2rem;
font-size: 2.5rem;
font-weight: 700;
}

.section-title {
text-align: center;
color: #34495e;
margin: 1.5rem 0;
font-size: 1.5rem;
font-weight: 600;
}

.task-form {
max-width: 500px;
margin: 0 auto 2rem;
display: flex;
gap: 0.75rem;
}

.task-input {
flex: 1;
padding: 0.75rem;
border: 2px solid #e2e8f0;
border-radius: 0.5rem;
font-size: 0.95rem;
transition: border-color 0.2s;
}

.task-input:focus {
outline: none;
border-color: #3498db;
}

.add-button {
background-color: #3498db;
color: white;
border: none;
border-radius: 0.5rem;
padding: 0.5rem 1.25rem;
font-size: 1.25rem;
cursor: pointer;
transition: background-color 0.2s;
}

.add-button:hover {
background-color: #2980b9;
}

.grid-container {
display: grid;
grid-template-columns: repeat(3, 1fr);
gap: 1rem;
margin: 1.5rem 0;
}

.task-card {
background: white;
border-radius: 0.75rem;
box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
transition: transform 0.2s, box-shadow 0.2s;
}

.task-card:hover {
transform: translateY(-3px);
box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.task-card-body {
padding: 1rem;
text-align: center;
}

.task-description {
color: #2c3e50;
font-size: 0.95rem;
margin-bottom: 0.75rem;
min-height: 2.5rem;
display: flex;
align-items: center;
justify-content: center;
}

.btn {
width: 100%;
padding: 0.5rem;
border: none;
border-radius: 0.5rem;
font-weight: 600;
font-size: 0.9rem;
cursor: pointer;
transition: background-color 0.2s;
}

.btn-success {
background-color: #2ecc71;
color: white;
}

.btn-success:hover {
background-color: #27ae60;
}

.btn-warning {
background-color: #f1c40f;
color: #2c3e50;
}

.btn-warning:hover {
background-color: #f39c12;
}

@media (max-width: 1024px) {
.grid-container {
    grid-template-columns: repeat(2, 1fr);
}
}

@media (max-width: 768px) {
.grid-container {
    grid-template-columns: 1fr;
}
}

.forms-container {
display: flex;
gap: 2rem;
max-width: 1000px;
margin: 2rem auto;
padding: 2rem;
}

.form-section {
flex: 1;
padding: 2rem;
background: white;
border-radius: 1rem;
box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
transition: transform 0.2s, box-shadow 0.2s;
}

.form-section:hover {
transform: translateY(-3px);
box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.form-title {
text-align: center;
color: #2c3e50;
margin-bottom: 1.5rem;
font-size: 1.5rem;
font-weight: 600;
}

.list-form {
display: flex;
flex-direction: column;
gap: 1rem;
}

.form-input {
padding: 0.75rem;
border: 2px solid #e2e8f0;
border-radius: 0.5rem;
font-size: 0.95rem;
transition: border-color 0.2s;
width: 100%;
}

.form-input:focus {
outline: none;
border-color: #3498db;
}

.form-button {
background-color: #3498db;
color: white;
border: none;
border-radius: 0.5rem;
padding: 0.75rem;
font-size: 1rem;
font-weight: 600;
cursor: pointer;
transition: background-color 0.2s;
width: 100%;
}

.form-button:hover {
background-color: #2980b9;
}

@media (max-width: 768px) {
.forms-container {
    flex-direction: column;
    padding: 1rem;
}

.form-section {
    padding: 1.5rem;
}
}

.flash-alert {
background-color: #ff4757;
color: white;
padding: 1rem;
margin: 1rem auto;
max-width: 1000px;
border-radius: 0.5rem;
text-align: center;
font-weight: 500;
animation: slideDown 0.5s ease-out;
box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

@keyframes slideDown {
from {
    transform: translateY(-100%);
    opacity: 0;
}
to {
    transform: translateY(0);
    opacity: 1;
}
}